generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(uuid())
  username   String
  email      String     @unique
  password   String
  picture    String?
  bio        String?
  blogs      Blog[]
  notes      Note[]
  resetToken String?    @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now())
  Category   Category[]
  Tag        Tag[]

  @@index([email])
}

model Blog {
  id            String   @id @default(uuid())
  userId        String
  url           String
  title         String?
  isRead        Boolean  @default(false)
  // Denormalized fields - store as JSON for better performance
  tagIds        String[] @default([]) // Array of tag IDs
  categoryName  String?
  tagNames      String[] @default([]) // Denormalized for quick filtering
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
  notes         Note[]

  // Optimized indexes
  @@index([userId, createdAt])
  @@index([userId, isRead])
  @@index([userId, categoryName])
  @@index([userId, tagNames])
}

model Category {
  id        String   @id @default(uuid())
  userId    String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, name])
  @@index([userId])
}

model Tag {
  id        String   @id @default(uuid())
  userId    String
  name      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, name])
  @@index([userId])
}

model Note {
  id     String @id @default(uuid())
  blogId String
  userId String
  text   String
  blog   Blog   @relation(fields: [blogId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@index([blogId])
  @@index([userId])
}
